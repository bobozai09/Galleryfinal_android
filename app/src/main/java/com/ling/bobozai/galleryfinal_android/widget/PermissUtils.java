package com.ling.bobozai.galleryfinal_android.widget;import android.Manifest;import android.annotation.TargetApi;import android.app.Activity;import android.app.AppOpsManager;import android.content.ActivityNotFoundException;import android.content.ComponentName;import android.content.Context;import android.content.Intent;import android.content.pm.ApplicationInfo;import android.content.pm.PackageManager;import android.hardware.Camera;import android.media.AudioFormat;import android.media.AudioRecord;import android.media.MediaRecorder;import android.os.Build;import android.os.Environment;import android.support.annotation.RequiresApi;import android.support.v4.app.ActivityCompat;import android.support.v4.content.ContextCompat;import com.flyco.dialog.listener.OnBtnClickL;import com.flyco.dialog.widget.MaterialDialog;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.lang.reflect.Field;import java.lang.reflect.Method;import java.util.ArrayList;import java.util.List;import java.util.Properties;/** * Created by boboz on 2018/3/24. */public class PermissUtils {    public static final String TAG = PermissUtils.class.getSimpleName();    public static final int PERMISSION_CODE_COMM = 1001;    public static final int PERMISSION_CODE_LOCATION = 1002;    public static final int PERMISSION_CODE_VIDEO = 1003;    public static final int PERMISSION_CODE_AUDIO = 1004;    public static final int PERMISSION_CODE_VIDEO$AUDIO = 1005;    public static final int PERMISSION_CALL_PHONENUMBER = 1006;    public static final String[] APP_ALL_PERMS = new String[]{            // 电话            Manifest.permission.READ_PHONE_STATE,            // SD卡            Manifest.permission.READ_EXTERNAL_STORAGE,            Manifest.permission.WRITE_EXTERNAL_STORAGE,//            //拍摄所需权限//            Manifest.permission.CAMERA,//            //录音权限//            Manifest.permission.RECORD_AUDIO,//            //高德地图所需权限            Manifest.permission.ACCESS_COARSE_LOCATION,            Manifest.permission.ACCESS_FINE_LOCATION,    };    public static final String[] PERMISSIONS_VIDEO$AUDIO = new String[]{            Manifest.permission.CAMERA,//拍摄所需权限            Manifest.permission.RECORD_AUDIO,//录音权限    };    public static final String[] PERMISSIONS_VIDEO = new String[]{            Manifest.permission.CAMERA,//拍摄所需权限    };    public static final String[] PERMISSIONS_AUDIO = new String[]{            Manifest.permission.RECORD_AUDIO,//录音权限    };    public static final String[] PERMISSIONS_LOCATION = new String[]{            Manifest.permission.ACCESS_COARSE_LOCATION,            Manifest.permission.ACCESS_FINE_LOCATION,    };    public static final String[] PERMISSION_CALL_PHONE = new String[]{            Manifest.permission.CALL_PHONE,    };    /**     * Check if the calling context has a set of permissions.     *     * @param context the calling context.     * @param perms   one ore more permissions, such as {@code android.Manifest.permission.CAMERA}.     * @return true if all permissions are already granted, false if at least one permission     * is not yet granted.     */    public static boolean hasPermissions(Context context, String... perms) {        for (String perm : perms) {            boolean hasPerm = (ContextCompat.checkSelfPermission(context, perm) == PackageManager.PERMISSION_GRANTED);            if (!hasPerm) {                return false;            }        }        return true;    }    @TargetApi(Build.VERSION_CODES.M)    public static void requestPermission(Activity act, String[] permissGroup, int reqCode4Permiss) {        List<String> noGrantPermissions = getDeinedPermissions(act, permissGroup);        if (noGrantPermissions != null && noGrantPermissions.size() > 0) {            boolean sholdRationale = false;            // 被禁用的权限名称列表            List<String> deniedPermNameList = new ArrayList<>();            for (int i = 0; i < noGrantPermissions.size(); i++) {                String perm = noGrantPermissions.get(i);                if (ActivityCompat.shouldShowRequestPermissionRationale(act, perm)) {                    sholdRationale = true;                    String permName = getPermName(perm);                    if (!deniedPermNameList.contains(permName)) {                        deniedPermNameList.add(permName);                    }                }            }            if (sholdRationale) {                // 拼接被禁用的权限名称字符串                StringBuilder sb = new StringBuilder();                sb.append(deniedPermNameList.get(0));                for (int i = 1; i < deniedPermNameList.size(); i++) {                    sb.append("、").append(deniedPermNameList.get(i));                }                if (!PermissUtils.isNotificationEnabled(act)) {                    sb.append("、").append("通知");//                    PermissUtils.showPermissDeniedTipDialog(this, "您禁用了通知权限，将接收不到精彩的视频推荐，请前往应用设置界面进行授权！");                }                PermissUtils.showPermissDeniedTipDialog(act, "您禁用了" + sb.toString() + "等权限，为了您更好的使用我们的应用，请前往应用设置界面进行授权！");            } else {                ActivityCompat.requestPermissions(act, noGrantPermissions.toArray(new String[noGrantPermissions.size()]), reqCode4Permiss);//                if (!PermissUtils.isNotificationEnabled(act) && ActivityManager.getInstance().isMainActivityOnTop()) {//                    PermissUtils.showPermissDeniedTipDialog(act, "您禁用了通知权限，将接收不到精彩的视频推荐，请前往应用设置界面进行授权！");//                }            }        }    }    public static List<String> getDeinedPermissions(Context ctx, String[] permissList) {        if (permissList == null || permissList.length <= 0) return null;        List<String> noPermissList = new ArrayList<>();        for (String permission : permissList) {            if (ContextCompat.checkSelfPermission(ctx, permission) != PackageManager.PERMISSION_GRANTED) {                noPermissList.add(permission);            }        }        return noPermissList;    }    public static void showPermissDeniedTipDialog(final Context ctx, String tip) {//        final MaterialDialog mDialog = DialogUtil.createMaterialFlycoDialog(ctx, "温馨提示", tip);//        mDialog.btnText("以后再说", "去授权");//        mDialog.setOnBtnClickL(new OnBtnClickL() {//            @Override//            public void onBtnClick() {//                mDialog.dismiss();//            }//        }, new OnBtnClickL() {//            @Override//            public void onBtnClick() {//                PermSettingUtil.goPermSetting(ctx);//                mDialog.dismiss();//            }//        });//        mDialog.show();    }    public static String getTipForPermissionRationale(String permission) {        String tip = "";        if (Manifest.permission.READ_EXTERNAL_STORAGE.equals(permission) || Manifest.permission.WRITE_EXTERNAL_STORAGE.equals(permission)) {            tip = "请您提供SD卡访问权限，用缓存临时数据，如果没有此权限数据将无法存储，可能造成应用使用异常！";        } else if (Manifest.permission.CAMERA.equals(permission)) {            tip = "请您提供视频录制相关权限，以便我们使用您的摄像头，确保正确录制音视频！";        } else if (Manifest.permission.RECORD_AUDIO.equals(permission)) {            tip = "请您提供录音权限，禁用将无法使用录音功能！";        } else if (Manifest.permission.ACCESS_COARSE_LOCATION.equals(permission) || Manifest.permission.ACCESS_FINE_LOCATION.equals(permission)) {            tip = "请您提供定位权限，用于获取位置信息，以便根据我们根据你的位置为您提供个性化数据，比如为您提供附近用户的精彩视频等！";        } else if (Manifest.permission.READ_PHONE_STATE.equals(permission)) {            tip = "请您提供直接拨打电话权限，直拨电话功能用于调用系统拨打电话界面拨打电话，免去您输入电话号码步骤，省心省事！";        }        return tip;    }    public static String getPermName(String permission) {        String permissName = "";        if (Manifest.permission.READ_EXTERNAL_STORAGE.equals(permission) || Manifest.permission.WRITE_EXTERNAL_STORAGE.equals(permission)) {            permissName = "读写存储卡";        } else if (Manifest.permission.CAMERA.equals(permission)) {            permissName = "录像";        } else if (Manifest.permission.RECORD_AUDIO.equals(permission)) {            permissName = "录音";        } else if (Manifest.permission.ACCESS_COARSE_LOCATION.equals(permission) || Manifest.permission.ACCESS_FINE_LOCATION.equals(permission)) {            permissName = "定位";        } else if (Manifest.permission.READ_PHONE_STATE.equals(permission)) {            permissName = "拨打电话";        }        return permissName;    }    @RequiresApi(api = Build.VERSION_CODES.KITKAT)    public static boolean isNotificationEnabled(Context context) {        String CHECK_OP_NO_THROW = "checkOpNoThrow";        String OP_POST_NOTIFICATION = "OP_POST_NOTIFICATION";        AppOpsManager mAppOps = (AppOpsManager) context.getSystemService(Context.APP_OPS_SERVICE);        ApplicationInfo appInfo = context.getApplicationInfo();        String pkg = context.getApplicationContext().getPackageName();        int uid = appInfo.uid;        Class appOpsClass = null;     /* Context.APP_OPS_MANAGER */        try {            appOpsClass = Class.forName(AppOpsManager.class.getName());            Method checkOpNoThrowMethod = appOpsClass.getMethod(CHECK_OP_NO_THROW, Integer.TYPE, Integer.TYPE,                    String.class);            Field opPostNotificationValue = appOpsClass.getDeclaredField(OP_POST_NOTIFICATION);            int value = (Integer) opPostNotificationValue.get(Integer.class);            return ((Integer) checkOpNoThrowMethod.invoke(mAppOps, value, uid, pkg) == AppOpsManager.MODE_ALLOWED);        } catch (Exception e) {            e.printStackTrace();        }        return false;    }    //--------------6.0以下判断是否有权限--------------//    /**     * 返回true 表示可以使用  返回false表示不可以使用     */    public static boolean haCameraPerm() {        boolean isCanUse = true;        Camera mCamera = null;        try {            mCamera = Camera.open();            Camera.Parameters mParameters = mCamera.getParameters(); //针对魅族手机            mCamera.setParameters(mParameters);        } catch (Exception e) {            isCanUse = false;        }        if (mCamera != null) {            try {                mCamera.release();            } catch (Exception e) {                e.printStackTrace();                return isCanUse;            }        }        return isCanUse;    }    /**     * 判断是否有录音权限     */    public static boolean hasAudioRecordPerm() {        // 音频获取源        int audioSource = MediaRecorder.AudioSource.MIC;        // 设置音频采样率，44100是目前的标准，但是某些设备仍然支持22050，16000，11025        int sampleRateInHz = 44100;        // 设置音频的录制的声道CHANNEL_IN_STEREO为双声道，CHANNEL_CONFIGURATION_MONO为单声道        int channelConfig = AudioFormat.CHANNEL_IN_STEREO;        // 音频数据格式:PCM 16位每个样本。保证设备支持。PCM 8位每个样本。不一定能得到设备支持        int audioFormat = AudioFormat.ENCODING_PCM_16BIT;        // 缓冲区字节大小        int bufferSizeInBytes = 0;        bufferSizeInBytes = AudioRecord.getMinBufferSize(sampleRateInHz, channelConfig, audioFormat);        AudioRecord audioRecord = new AudioRecord(audioSource, sampleRateInHz, channelConfig, audioFormat, bufferSizeInBytes);        try {//开始录制音频            audioRecord.startRecording();// 防止某些手机崩溃        } catch (IllegalStateException e) {          //  LogUtil.e(TAG, e);        }        //根据开始录音判断是否有录音权限.【注意】：这个判断，当视频同事打开的时候，判断会有误        if (audioRecord.getRecordingState() != AudioRecord.RECORDSTATE_RECORDING) {            return false;        }        //根据录音长度判断        byte[] bytes = new byte[1024];        int readSize = audioRecord.read(bytes, 0, 1024); //至于为什么写1024 我也不知道        if (readSize == AudioRecord.ERROR_INVALID_OPERATION || readSize <= 0) {            return false;        }        //如果短时间内频繁检测，会造成audioRecord还未销毁完成，此时检测会返回RECORDSTATE_STOPPED状态，再去read，会读到0的size，所以此时默认权限通过        if (audioRecord.getRecordingState() == AudioRecord.RECORDSTATE_STOPPED) {            return true;        }        audioRecord.stop();        audioRecord.release();//释放资源        audioRecord = null;        return true;    }    public static class PermSettingUtil {        //------------国产手机        private static final String MANUFACTURER_HUAWEI = "Huawei";//华为        private static final String MANUFACTURER_MEIZU = "Meizu";//魅族        private static final String MANUFACTURER_XIAOMI = "Xiaomi";//小米        private static final String MANUFACTURER_OPPO = "OPPO";        private static final String MANUFACTURER_VIVO = "vivo";        private static final String MANUFACTURER_LETV = "Letv";//乐视        private static final String MANUFACTURER_ZTE = "ZTE";//中兴        private static final String MANUFACTURER_YULONG = "YuLong";//酷派        private static final String MANUFACTURER_LENOVO = "LENOVO";//联想        private static final String MANUFACTURER_SMARTISAN = "Smartisan";//锤子 品牌manufacturer="Smartisan"todo ??        private static final String MANUFACTURER_360 = "360";//360手机 品牌manufacturer="360" todo ??        //------------国外手机        private static final String MANUFACTURER_SAMSUNG = "samsung";//三星        private static final String MANUFACTURER_LG = "LG";        private static final String MANUFACTURER_SONY = "Sony";//索尼        /**         * 此函数可以自己定义         *         * @param context         */        public static void goPermSetting(Context context) {            try {            //    context.startActivity(getPermSettingIntent(context));            } catch (ActivityNotFoundException e) {               // context.startActivity(IntentsUtils.getAppDetailSettingIntent(context));            } catch (Exception e) {              //  context.startActivity(IntentsUtils.getAppDetailSettingIntent(context));            }        }        private static final String KEY_MIUI_VERSION_CODE = "ro.miui.ui.version.code";        private static final String KEY_MIUI_VERSION_NAME = "ro.miui.ui.version.name";        public static int getMIUIVersionCode() {            int verCode = -1;            Properties properties = new Properties();            try {                properties.load(new FileInputStream(new File(Environment.getRootDirectory(), "build.prop")));                String vercode = properties.getProperty(KEY_MIUI_VERSION_CODE);                verCode = Integer.valueOf(vercode);            } catch (Exception e) {                e.printStackTrace();            }            return verCode;        }        public static String getMIUIVersionName() {            String verCode = null;            Properties properties = new Properties();            try {                properties.load(new FileInputStream(new File(Environment.getRootDirectory(), "build.prop")));                verCode = properties.getProperty(KEY_MIUI_VERSION_NAME);            } catch (IOException e) {                e.printStackTrace();            }            return verCode;        }        /**         * 获取应用授权页面intent         * 华为——Huawei         * 魅族——Meizu         * 小米——Xiaomi         * oppo——OPPO         * vivo——vivo         * 乐视——Letv         * 中兴——ZTE         * 酷派——YuLong         * 联想——LENOVO         * 锤子——Smartisan ？？         * 360——360 ??         * LG——LG         * 索尼——Sony         * 三星——samsung         */      //  public static Intent getPermSettingIntent(Context ctx) {//            String manufacturer = getPhoneManufacturer();//            Intent permSettingIntent = null;//            if (MANUFACTURER_XIAOMI.equalsIgnoreCase(manufacturer)) {//                String romVerName = getMIUIVersionName();////                int romVerCode = getMIUIVersionCode();////                LogUtil.d(TAG, "MIUI romVerName=" + romVerName);////                if ("V5".equals(romVerName)) {//                    permSettingIntent = IntentsUtils.getAppDetailSettingIntent(ctx);//                } else if ("V6".equals(romVerName) || "V7".equals(romVerName) || "V8".equals(romVerName)) {//                    permSettingIntent = new Intent("miui.intent.action.APP_PERM_EDITOR");//                    permSettingIntent.setClassName("com.miui.securitycenter", "com.miui.permcenter.permissions.AppPermissionsEditorActivity");//                    permSettingIntent.putExtra("extra_pkgname", ctx.getPackageName());//                } else /*if ("V8".equals(rom)) */ {//                    permSettingIntent = new Intent("miui.intent.action.APP_PERM_EDITOR");//                    permSettingIntent.setClassName("com.miui.securitycenter", "com.miui.permcenter.permissions.PermissionsEditorActivity");//                    permSettingIntent.putExtra("extra_pkgname", ctx.getPackageName());//                }//            } else if (MANUFACTURER_HUAWEI.equalsIgnoreCase(manufacturer)) {//                permSettingIntent = new Intent();//                permSettingIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);//                permSettingIntent.putExtra("packageName", BuildConfig.APPLICATION_ID);//                ComponentName comp = new ComponentName("com.huawei.systemmanager", "com.huawei.permissionmanager.ui.MainActivity");//                permSettingIntent.setComponent(comp);//            } else if (MANUFACTURER_MEIZU.equalsIgnoreCase(manufacturer)) {//                permSettingIntent = new Intent("com.meizu.safe.security.SHOW_APPSEC");//                permSettingIntent.addCategory(Intent.CATEGORY_DEFAULT);//                permSettingIntent.putExtra("packageName", BuildConfig.APPLICATION_ID);//            } else if (MANUFACTURER_LETV.equalsIgnoreCase(manufacturer)) {//                permSettingIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);//                permSettingIntent.putExtra("packageName", BuildConfig.APPLICATION_ID);//                ComponentName comp = new ComponentName("com.letv.android.letvsafe", "com.letv.android.letvsafe.PermissionAndApps");//                permSettingIntent.setComponent(comp);//            } else if (MANUFACTURER_SMARTISAN.equalsIgnoreCase(manufacturer)) {//                permSettingIntent = new Intent();//                permSettingIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);//                permSettingIntent.putExtra("packageName", BuildConfig.APPLICATION_ID);//                ComponentName comp = new ComponentName("com.smartisanos.security", "com.smartisanos.security.MainActivity");//                permSettingIntent.setComponent(comp);//            } else if (MANUFACTURER_360.equalsIgnoreCase(manufacturer)) {//                permSettingIntent = new Intent("android.intent.action.MAIN");//                permSettingIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);//                permSettingIntent.putExtra("packageName", BuildConfig.APPLICATION_ID);//                ComponentName comp = new ComponentName("com.qihoo360.mobilesafe", "com.qihoo360.mobilesafe.ui.index.AppEnterActivity");//                permSettingIntent.setComponent(comp);//            } else if (MANUFACTURER_OPPO.equalsIgnoreCase(manufacturer)) {//                permSettingIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);//                permSettingIntent.putExtra("packageName", BuildConfig.APPLICATION_ID);//                ComponentName comp = new ComponentName("com.color.safecenter", "com.color.safecenter.permission.PermissionManagerActivity");//                permSettingIntent.setComponent(comp);//            } else if (MANUFACTURER_LG.equalsIgnoreCase(manufacturer)) {//                permSettingIntent = new Intent("android.intent.action.MAIN");//                permSettingIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);//                permSettingIntent.putExtra("packageName", BuildConfig.APPLICATION_ID);//                ComponentName comp = new ComponentName("com.android.settings", "com.android.settings.Settings$AccessLockSummaryActivity");//                permSettingIntent.setComponent(comp);//            } else if (MANUFACTURER_SONY.equalsIgnoreCase(manufacturer)) {//                permSettingIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);//                permSettingIntent.putExtra("packageName", BuildConfig.APPLICATION_ID);//                ComponentName comp = new ComponentName("com.sonymobile.cta", "com.sonymobile.cta.SomcCTAMainActivity");//                permSettingIntent.setComponent(comp);//            } else if (MANUFACTURER_VIVO.equalsIgnoreCase(manufacturer)) {//                //todo//            } else if (MANUFACTURER_LENOVO.equalsIgnoreCase(manufacturer)) {//                //todo//            } else if (MANUFACTURER_YULONG.equalsIgnoreCase(manufacturer)) {//                //todo//            } else if (MANUFACTURER_ZTE.equalsIgnoreCase(manufacturer)) {//                //todo//            } else if (MANUFACTURER_SAMSUNG.equalsIgnoreCase(manufacturer)) {//                //todo//            }////            if (permSettingIntent == null)//                permSettingIntent = IntentsUtils.getAppDetailSettingIntent(ctx);////            return permSettingIntent;   //    }    }}